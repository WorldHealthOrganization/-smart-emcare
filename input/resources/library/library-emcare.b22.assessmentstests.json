{
    "resourceType": "Library",
    "id": "emcareb22assessmentstests",
    "url": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcareb22assessmentstests",
    "identifier": [
        {
            "use": "official",
            "value": "emcare.b22.assessmentstests"
        }
    ],
    "version": "1.0.1.rc12.build.158",
    "name": "emcareb22assessmentstests",
    "title": "EmCare.B22.AssessmentsTests",
    "status": "active",
    "type": {
        "coding": [
            {
                "system": "http://hl7.org/fhir/ValueSet/library-type",
                "code": "logic-library"
            }
        ]
    },
    "relatedArtifact": [
        {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/who/anc-cds/Library/FHIRHelpers"
        },
        {
            "type": "depends-on",
            "resource": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcarebase"
        },
        {
            "type": "depends-on",
            "resource": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcareobservation"
        },
        {
            "type": "depends-on",
            "resource": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcarevalueset"
        },
        {
            "type": "depends-on",
            "resource": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcarecombineddataelements"
        }
    ],
    "parameter": [
        {
            "name": "ageinmonths",
            "use": "out",
            "type": "integer"
        },
        {
            "name": "age auto-calculated (presented as number of years, months, days) of the client based on date of birth or estimated age or based on auto-calculation from estimaged date of birth",
            "use": "out",
            "type": "integer"
        },
        {
            "name": "ageindays",
            "use": "out",
            "type": "integer"
        },
        {
            "name": "a-breastfeedingtest",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "a-respiratoryrate",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "a-bronchodilatortest",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "a-hemoglobin",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "a-secondtemperature",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "a-fluidtest",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "respiratory rate profile",
            "use": "out",
            "type": "Quantity"
        },
        {
            "name": "respiratory rate second count profile",
            "use": "out",
            "type": "Quantity"
        },
        {
            "name": "fast breathing profile",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "oftrp",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "ds",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "emcare.b7.de09",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "emcare.b7.de10",
            "use": "out",
            "type": "boolean"
        }
    ],
    "content": [
        {
            "id": "ig-loader-emcareb22assessmentstests.cql",
            "contentType": "text/cql",
            "data": "LyoKQGF1dGhvcjogUGF0cmljayBEZWxjcm9peApAZGVzY3JpcHRpb246IFRoaXMgbGlicmFyeSBpcyBwYXJ0IG9mIHRoZSBwcm9qZWN0IEVtQ2FyZQoqLwpsaWJyYXJ5IGVtY2FyZWIyMmFzc2Vzc21lbnRzdGVzdHMgdmVyc2lvbiAnMS4wLjEucmMxMi5idWlsZC4xNTgnCnVzaW5nIEZISVIgdmVyc2lvbiAnNC4wLjEnCmluY2x1ZGUgRkhJUkhlbHBlcnMgdmVyc2lvbiAnNC4wLjEnIGNhbGxlZCBGSElSSGVscGVycyAKaW5jbHVkZSBlbWNhcmViYXNlIHZlcnNpb24gJzEuMC4xLnJjMTIuYnVpbGQuMTU4JyBjYWxsZWQgQmFzZQppbmNsdWRlIGVtY2FyZW9ic2VydmF0aW9uIHZlcnNpb24gJzEuMC4xLnJjMTIuYnVpbGQuMTU4JyBjYWxsZWQgb2JzCmluY2x1ZGUgZW1jYXJldmFsdWVzZXQgdmVyc2lvbiAnMS4wLjEucmMxMi5idWlsZC4xNTgnIGNhbGxlZCB2YWwKaW5jbHVkZSBlbWNhcmVjb21iaW5lZGRhdGFlbGVtZW50cyB2ZXJzaW9uICcxLjAuMS5yYzEyLmJ1aWxkLjE1OCcgY2FsbGVkIGMKCgoKCmNvbnRleHQgUGF0aWVudAoKCi8qIAphZ2Vpbm1vbnRocyA6IG5hbgogICAgQWdlSW5Nb250aHMoKQoqLwpkZWZpbmUgImFnZWlubW9udGhzIjoKICAgIEFnZUluTW9udGhzKCkKCi8qIAphZ2VpbmRheXMgOiBuYW4KICAgIEFnZUluRGF5cygpCiovCmRlZmluZSAiYWdlaW5kYXlzIjoKICAgIEFnZUluRGF5cygpCgovKiAKYS1icmVhc3RmZWVkaW5ndGVzdCA6IGFwcGxpY2FiaWxpdHktQnJlYXN0RmVlZGluZ1Rlc3QKICAgICggICAgQWdlSW5Nb250aHMoKT49MiBhbmQgQWdlSW5Nb250aHMoKTw2IGFuZCAgYy4ic2V2ZXJlIGNsYXNzaWZpY2F0aW9uIHVwIHRvIGFzc2Vzc21lbnRzIGFuZCB0ZXN0cyBleGNsdWRpbmcgc2V2ZXJlIGRlaHlkcmF0aW9uIiAhPXRydWUpCiAgICAgb3IgKCAgICBBZ2VJbk1vbnRocygpPDIgYW5kICBhbmQgICJCcmVhc3RmZWQiID0gdHJ1ZSBhbmQgYy4ieWkgc2V2ZXJlIGNsYXNzaWZpY2F0aW9uIG90aGVyIHRoYW4gc2V2ZXJlIGRlaHlkcmF0aW9uIiAhPXRydWUpCiovCmRlZmluZSAiYS1icmVhc3RmZWVkaW5ndGVzdCI6CiAgICAoICAgIEFnZUluTW9udGhzKCk+PTIgYW5kIEFnZUluTW9udGhzKCk8NiBhbmQgIENvYWxlc2NlKGMuInNldmVyZSBjbGFzc2lmaWNhdGlvbiB1cCB0byBhc3Nlc3NtZW50cyBhbmQgdGVzdHMgZXhjbHVkaW5nIHNldmVyZSBkZWh5ZHJhdGlvbiIsZmFsc2UpIT10cnVlKQogICAgIG9yICggICAgQWdlSW5Nb250aHMoKTwyIGFuZCAgYW5kICBCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjIxUzEuREUwNicpID0gdHJ1ZSBhbmQgQ29hbGVzY2UoYy4ieWkgc2V2ZXJlIGNsYXNzaWZpY2F0aW9uIG90aGVyIHRoYW4gc2V2ZXJlIGRlaHlkcmF0aW9uIixmYWxzZSkhPXRydWUpCgovKiBhbGlhcyBhcHBsaWNhYmlsaXR5LWJyZWFzdGZlZWRpbmd0ZXN0IDogYS1icmVhc3RmZWVkaW5ndGVzdCovCmRlZmluZSAiYXBwbGljYWJpbGl0eS1icmVhc3RmZWVkaW5ndGVzdCI6CiAgICAiYS1icmVhc3RmZWVkaW5ndGVzdCIKCi8qIAphLXJlc3BpcmF0b3J5cmF0ZSA6IGFwcGxpY2FiaWxpdHktUmVzcGlyYXRvcnlSYXRlCiAgICAoIkNvdWdoIiA9IHRydWUgb3IgIkRpZmZpY3VsdHkgQnJlYXRoaW5nIiA9IHRydWUgb3IgIkFnZUluTW9udGhzIjwyKSBhbmQgbyJGYXN0IEJyZWF0aGluZyIgaXMgbnVsbAoqLwpkZWZpbmUgImEtcmVzcGlyYXRvcnlyYXRlIjoKICAgIChCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjEwUzEuREUwNScpID0gdHJ1ZSBvciBCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjEwUzEuREUwMScpID0gdHJ1ZSBvciAiYWdlaW5tb250aHMiPDIpIGFuZCBCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjIyLkRFMDcnKSBpcyBudWxsCgovKiBhbGlhcyBhcHBsaWNhYmlsaXR5LXJlc3BpcmF0b3J5cmF0ZSA6IGEtcmVzcGlyYXRvcnlyYXRlKi8KZGVmaW5lICJhcHBsaWNhYmlsaXR5LXJlc3BpcmF0b3J5cmF0ZSI6CiAgICAiYS1yZXNwaXJhdG9yeXJhdGUiCgovKiAKYS1icm9uY2hvZGlsYXRvcnRlc3QgOiBhcHBsaWNhYmlsaXR5LUJyb25jaG9kaWxhdG9yVGVzdAogICAgKCJDb3VnaCIgPSB0cnVlIG9yICJEaWZmaWN1bHR5IEJyZWF0aGluZyIgPSB0cnVlKSBhbmQgIldoZWV6aW5nIiA9IHRydWUgYW5kIChvIkZhc3QgQnJlYXRoaW5nIiA9IHRydWUgb3IgIkNoZXN0IEluZHJhd2luZyIgPSB0cnVlKSBhbmQgIGMuImRhbmdlciBzaWducyIgIT0gdHJ1ZSBhbmQgIlN0cmlkb3IgaW4gYSBjYWxtIGNoaWxkIj0gZmFsc2UgYW5kICJPeHlnZW4gU2F0dXJhdGlvbiIgPj0gOTAgJyUnCiovCmRlZmluZSAiYS1icm9uY2hvZGlsYXRvcnRlc3QiOgogICAgKEJhc2UuR2V0T2JzVmFsdWUoJ0VtQ2FyZS5CMTBTMS5ERTA1JykgPSB0cnVlIG9yIEJhc2UuR2V0T2JzVmFsdWUoJ0VtQ2FyZS5CMTBTMS5ERTAxJykgPSB0cnVlKSBhbmQgQmFzZS5HZXRPYnNWYWx1ZSgnRW1DYXJlLkIxMFMyLkRFMDUnKSA9IHRydWUgYW5kIChCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjIyLkRFMDcnKSA9IHRydWUgb3IgQmFzZS5HZXRPYnNWYWx1ZSgnRW1DYXJlLkIxMFMyLkRFMDMnKSA9IHRydWUpIGFuZCAgQ29hbGVzY2UoYy4iZGFuZ2VyIHNpZ25zIixmYWxzZSkhPXRydWUgYW5kIEJhc2UuR2V0T2JzVmFsdWUoJ0VtQ2FyZS5CMTBTMi5ERTA0Jyk9IGZhbHNlIGFuZCBCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjEwUzIuREUwNycpID49IDkwICclJwoKLyogYWxpYXMgYXBwbGljYWJpbGl0eS1icm9uY2hvZGlsYXRvcnRlc3QgOiBhLWJyb25jaG9kaWxhdG9ydGVzdCovCmRlZmluZSAiYXBwbGljYWJpbGl0eS1icm9uY2hvZGlsYXRvcnRlc3QiOgogICAgImEtYnJvbmNob2RpbGF0b3J0ZXN0IgoKLyogCmEtaGVtb2dsb2JpbiA6IGFwcGxpY2FiaWxpdHktSGVtb2dsb2JpbgogICAgIlBhbG1hciBwYWxsb3IiID0gIlNvbWUgcGFsbWFyIHBhbGxvciIgb3IgIlBhbG1hciBQYWxsb3IiID0gIlNldmVyZSBQYWxtYXIgUGFsbG9yIiBvciAiTXVjb3VzIG1lbWJyYW5lIHBhbGxvciIgPSAiU29tZSBtdWNvdXMgbWVtYnJhbmUgcGFsbG9yIiBvciAiTXVjb3VzIG1lbWJyYW5lIHBhbGxvciIgPSAiU2V2ZXJlIG11Y291cyBtZW1icmFuZSBwYWxsb3IiCiovCmRlZmluZSAiYS1oZW1vZ2xvYmluIjoKICAgIEJhc2UuSGFzT2JzVmFsdWVDb2RlKCdFbUNhcmUuQjE1UzIuREUwMScsICdFbUNhcmUuQjE1UzIuREUwMycpIG9yIEJhc2UuSGFzT2JzVmFsdWVDb2RlKCdFbUNhcmUuQjE1UzIuREUwMScsICdFbUNhcmUuQjE1UzIuREUwMicpIG9yIEJhc2UuSGFzT2JzVmFsdWVDb2RlKCdFbUNhcmUuQjE1UzIuREUwOScsICdFbUNhcmUuQjE1UzIuREUxMScpIG9yIEJhc2UuSGFzT2JzVmFsdWVDb2RlKCdFbUNhcmUuQjE1UzIuREUwOScsICdFbUNhcmUuQjE1UzIuREUxMCcpCgovKiBhbGlhcyBhcHBsaWNhYmlsaXR5LWhlbW9nbG9iaW4gOiBhLWhlbW9nbG9iaW4qLwpkZWZpbmUgImFwcGxpY2FiaWxpdHktaGVtb2dsb2JpbiI6CiAgICAiYS1oZW1vZ2xvYmluIgoKLyogCmEtc2Vjb25kdGVtcGVyYXR1cmUgOiBhcHBsaWNhYmlsaXR5LVNlY29uZFRlbXBlcmF0dXJlCiAgICBjLiJwc2JpIG90aGVyIHRoYW4gdGVtcGVyYXR1cmUiICE9IHRydWUgYW5kIEFnZUluTW9udGhzKCk8MiBhbmQgIkF4aWxsYXJ5IFRlbXBlcmF0dXJlIiA+IDM4LjUgJ0NlbCcKKi8KZGVmaW5lICJhLXNlY29uZHRlbXBlcmF0dXJlIjoKICAgIENvYWxlc2NlKGMuInBzYmkgb3RoZXIgdGhhbiB0ZW1wZXJhdHVyZSIsZmFsc2UpIT10cnVlIGFuZCBBZ2VJbk1vbnRocygpPDIgYW5kIEJhc2UuR2V0T2JzVmFsdWUoJ0VtQ2FyZS5CNi5ERTAxJykgPiAzOC41ICdDZWwnCgovKiBhbGlhcyBhcHBsaWNhYmlsaXR5LXNlY29uZHRlbXBlcmF0dXJlIDogYS1zZWNvbmR0ZW1wZXJhdHVyZSovCmRlZmluZSAiYXBwbGljYWJpbGl0eS1zZWNvbmR0ZW1wZXJhdHVyZSI6CiAgICAiYS1zZWNvbmR0ZW1wZXJhdHVyZSIKCi8qIAphLWZsdWlkdGVzdCA6IGFwcGxpY2FiaWxpdHktRmx1aWRUZXN0CiAgICAoIk5vdCBhYmxlIHRvIGRyaW5rIG9yIGJyZWFzdGZlZWQiID0gdHJ1ZSBvciAiVm9taXRpbmcgRXZlcnl0aGluZyIgPSB0cnVlIG9yICJEaWFycmhvZWEiID0gdHJ1ZSkgYW5kIG8iT3JhbCBGbHVpZCBUZXN0IFJlc3VsdHMiIGlzIG51bGwKKi8KZGVmaW5lICJhLWZsdWlkdGVzdCI6CiAgICAoIm5vdCBhYmxlIHRvIGRyaW5rIG9yIGJyZWFzdGZlZWQiID0gdHJ1ZSBvciAidm9taXRpbmcgZXZlcnl0aGluZyIgPSB0cnVlIG9yIEJhc2UuR2V0T2JzVmFsdWUoJ0VtQ2FyZS5CMTFTMS5ERTAxJykgPSB0cnVlKSBhbmQgQmFzZS5HZXRPYnNWYWx1ZSgnRW1DYXJlLkIyMi5ERTA4JykgaXMgbnVsbAoKLyogYWxpYXMgYXBwbGljYWJpbGl0eS1mbHVpZHRlc3QgOiBhLWZsdWlkdGVzdCovCmRlZmluZSAiYXBwbGljYWJpbGl0eS1mbHVpZHRlc3QiOgogICAgImEtZmx1aWR0ZXN0IgoKLyogCnJlc3BpcmF0b3J5IHJhdGUgcHJvZmlsZSA6IG5hbgogICAgbyJSZXNwaXJhdG9yeSBSYXRlIgoqLwpkZWZpbmUgInJlc3BpcmF0b3J5IHJhdGUgcHJvZmlsZSI6CiAgICBCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjIyLkRFMDEnKQoKLyogCnJlc3BpcmF0b3J5IHJhdGUgc2Vjb25kIGNvdW50IHByb2ZpbGUgOiBuYW4KICAgIG8iUmVzcGlyYXRvcnkgUmF0ZSBTZWNvbmQgQ291bnQiCiovCmRlZmluZSAicmVzcGlyYXRvcnkgcmF0ZSBzZWNvbmQgY291bnQgcHJvZmlsZSI6CiAgICBCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjIyLkRFMDQnKQoKLyogCmZhc3QgYnJlYXRoaW5nIHByb2ZpbGUgOiBuYW4KICAgIG8iRmFzdCBCcmVhdGhpbmciCiovCmRlZmluZSAiZmFzdCBicmVhdGhpbmcgcHJvZmlsZSI6CiAgICBCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjIyLkRFMDcnKQoKLyogCm9mdHJwIDogVW5hYmxlIHRvIFBlcmZvcm0gT3JhbCBGbHVpZCBUZXN0IFByb2ZpbGUKICAgIG8iVW5hYmxlIHRvIFBlcmZvcm0gT3JhbCBGbHVpZCBUZXN0IgoqLwpkZWZpbmUgIm9mdHJwIjoKICAgIEJhc2UuR2V0T2JzVmFsdWUoJ0VtQ2FyZS5CMjIuREUxNCcpCgovKiBhbGlhcyB1bmFibGUgdG8gcGVyZm9ybSBvcmFsIGZsdWlkIHRlc3QgcHJvZmlsZSA6IG9mdHJwKi8KZGVmaW5lICJ1bmFibGUgdG8gcGVyZm9ybSBvcmFsIGZsdWlkIHRlc3QgcHJvZmlsZSI6CiAgICAib2Z0cnAiCgovKiAKZHMgOiBEYW5nZXIgU2lnbnMKICAgIENvYWxlc2NlKGMuImRhbmdlciBzaWducyIsZmFsc2UpCiovCmRlZmluZSAiZHMiOgogICAgQ29hbGVzY2UoYy4iZGFuZ2VyIHNpZ25zIixmYWxzZSkKCi8qIGFsaWFzIGRhbmdlciBzaWducyA6IGRzKi8KZGVmaW5lICJkYW5nZXIgc2lnbnMiOgogICAgImRzIgoKLyogCmVtY2FyZS5iNy5kZTA5IDogTm90IGFibGUgdG8gZHJpbmsgb3IgYnJlYXN0ZmVlZAogICAgQ29hbGVzY2UobyJOb3QgYWJsZSB0byBkcmluayBvciBicmVhc3RmZWVkIixmYWxzZSkKKi8KZGVmaW5lICJlbWNhcmUuYjcuZGUwOSI6CiAgICBDb2FsZXNjZShCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjcuREUwOScpLGZhbHNlKQoKLyogYWxpYXMgbm90IGFibGUgdG8gZHJpbmsgb3IgYnJlYXN0ZmVlZCA6IGVtY2FyZS5iNy5kZTA5Ki8KZGVmaW5lICJub3QgYWJsZSB0byBkcmluayBvciBicmVhc3RmZWVkIjoKICAgICJlbWNhcmUuYjcuZGUwOSIKCi8qIAplbWNhcmUuYjcuZGUxMCA6IFZvbWl0aW5nIEV2ZXJ5dGhpbmcKICAgIENvYWxlc2NlKG8iVm9taXRpbmcgRXZlcnl0aGluZyIsZmFsc2UpCiovCmRlZmluZSAiZW1jYXJlLmI3LmRlMTAiOgogICAgQ29hbGVzY2UoQmFzZS5HZXRPYnNWYWx1ZSgnRW1DYXJlLkI3LkRFMTAnKSxmYWxzZSkKCi8qIGFsaWFzIHZvbWl0aW5nIGV2ZXJ5dGhpbmcgOiBlbWNhcmUuYjcuZGUxMCovCmRlZmluZSAidm9taXRpbmcgZXZlcnl0aGluZyI6CiAgICAiZW1jYXJlLmI3LmRlMTAiCg=="
        }
    ]
}