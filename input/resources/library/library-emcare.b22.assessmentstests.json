{
    "resourceType": "Library",
    "id": "emcareb22assessmentstests",
    "url": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcareb22assessmentstests",
    "identifier": [
        {
            "use": "official",
            "value": "emcare.b22.assessmentstests"
        }
    ],
    "version": "1.0.1.rc12.build.176",
    "name": "emcareb22assessmentstests",
    "title": "EmCare.B22.AssessmentsTests",
    "status": "active",
    "type": {
        "coding": [
            {
                "system": "http://hl7.org/fhir/ValueSet/library-type",
                "code": "logic-library"
            }
        ]
    },
    "relatedArtifact": [
        {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/who/anc-cds/Library/FHIRHelpers"
        },
        {
            "type": "depends-on",
            "resource": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcarebase"
        },
        {
            "type": "depends-on",
            "resource": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcareobservation"
        },
        {
            "type": "depends-on",
            "resource": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcarevalueset"
        },
        {
            "type": "depends-on",
            "resource": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcarecombineddataelements"
        }
    ],
    "parameter": [
        {
            "name": "ageinmonths",
            "use": "out",
            "type": "integer"
        },
        {
            "name": "age auto-calculated (presented as number of years, months, days) of the client based on date of birth or estimated age or based on auto-calculation from estimaged date of birth",
            "use": "out",
            "type": "integer"
        },
        {
            "name": "ageindays",
            "use": "out",
            "type": "integer"
        },
        {
            "name": "a-breastfeedingtest",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "a-respiratoryrate",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "a-bronchodilatortest",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "a-hemoglobin",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "a-secondtemperature",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "a-fluidtest",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "respiratory rate profile",
            "use": "out",
            "type": "Quantity"
        },
        {
            "name": "respiratory rate second count profile",
            "use": "out",
            "type": "Quantity"
        },
        {
            "name": "fast breathing profile",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "oftrp",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "ds",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "emcare.b7.de09",
            "use": "out",
            "type": "boolean"
        },
        {
            "name": "emcare.b7.de10",
            "use": "out",
            "type": "boolean"
        }
    ],
    "content": [
        {
            "id": "ig-loader-emcareb22assessmentstests.cql",
            "contentType": "text/cql",
            "data": "LyoKQGF1dGhvcjogUGF0cmljayBEZWxjcm9peApAZGVzY3JpcHRpb246IFRoaXMgbGlicmFyeSBpcyBwYXJ0IG9mIHRoZSBwcm9qZWN0IEVtQ2FyZQoqLwpsaWJyYXJ5IGVtY2FyZWIyMmFzc2Vzc21lbnRzdGVzdHMgdmVyc2lvbiAnMS4wLjEucmMxMi5idWlsZC4xNzYnCnVzaW5nIEZISVIgdmVyc2lvbiAnNC4wLjEnCmluY2x1ZGUgRkhJUkhlbHBlcnMgdmVyc2lvbiAnNC4wLjEnIGNhbGxlZCBGSElSSGVscGVycyAKaW5jbHVkZSBlbWNhcmViYXNlIHZlcnNpb24gJzEuMC4xLnJjMTIuYnVpbGQuMTc2JyBjYWxsZWQgQmFzZQppbmNsdWRlIGVtY2FyZW9ic2VydmF0aW9uIHZlcnNpb24gJzEuMC4xLnJjMTIuYnVpbGQuMTc2JyBjYWxsZWQgb2JzCmluY2x1ZGUgZW1jYXJldmFsdWVzZXQgdmVyc2lvbiAnMS4wLjEucmMxMi5idWlsZC4xNzYnIGNhbGxlZCB2YWwKaW5jbHVkZSBlbWNhcmVjb21iaW5lZGRhdGFlbGVtZW50cyB2ZXJzaW9uICcxLjAuMS5yYzEyLmJ1aWxkLjE3NicgY2FsbGVkIGMKCgoKCmNvbnRleHQgUGF0aWVudAoKCi8qIAphZ2Vpbm1vbnRocyA6IG5hbgogICAgQWdlSW5Nb250aHMoKQoqLwpkZWZpbmUgImFnZWlubW9udGhzIjoKICAgIEFnZUluTW9udGhzKCkKCi8qIAphZ2VpbmRheXMgOiBuYW4KICAgIEFnZUluRGF5cygpCiovCmRlZmluZSAiYWdlaW5kYXlzIjoKICAgIEFnZUluRGF5cygpCgovKiAKYS1icmVhc3RmZWVkaW5ndGVzdCA6IGFwcGxpY2FiaWxpdHktQnJlYXN0RmVlZGluZ1Rlc3QKICAgICggICAgQWdlSW5Nb250aHMoKT49MiBhbmQgQWdlSW5Nb250aHMoKTw2IGFuZCAgYy4ic2V2ZXJlIGNsYXNzaWZpY2F0aW9uIHVwIHRvIGFzc2Vzc21lbnRzIGFuZCB0ZXN0cyBleGNsdWRpbmcgc2V2ZXJlIGRlaHlkcmF0aW9uIiAhPXRydWUpCiAgICAgb3IgKCAgICBBZ2VJbk1vbnRocygpPDIgYW5kICAgIkJyZWFzdGZlZCIgPSB0cnVlIGFuZCBjLiJ5aSBzZXZlcmUgY2xhc3NpZmljYXRpb24gb3RoZXIgdGhhbiBzZXZlcmUgZGVoeWRyYXRpb24iICE9dHJ1ZSkKKi8KZGVmaW5lICJhLWJyZWFzdGZlZWRpbmd0ZXN0IjoKICAgICggICAgQWdlSW5Nb250aHMoKT49MiBhbmQgQWdlSW5Nb250aHMoKTw2IGFuZCAgQ29hbGVzY2UoYy4ic2V2ZXJlIGNsYXNzaWZpY2F0aW9uIHVwIHRvIGFzc2Vzc21lbnRzIGFuZCB0ZXN0cyBleGNsdWRpbmcgc2V2ZXJlIGRlaHlkcmF0aW9uIixmYWxzZSkhPXRydWUpCiAgICAgb3IgKCAgICBBZ2VJbk1vbnRocygpPDIgYW5kICAgQmFzZS5HZXRPYnNWYWx1ZSgnRW1DYXJlLkIyMVMxLkRFMDYnKSA9IHRydWUgYW5kIENvYWxlc2NlKGMuInlpIHNldmVyZSBjbGFzc2lmaWNhdGlvbiBvdGhlciB0aGFuIHNldmVyZSBkZWh5ZHJhdGlvbiIsZmFsc2UpIT10cnVlKQoKLyogYWxpYXMgYXBwbGljYWJpbGl0eS1icmVhc3RmZWVkaW5ndGVzdCA6IGEtYnJlYXN0ZmVlZGluZ3Rlc3QqLwpkZWZpbmUgImFwcGxpY2FiaWxpdHktYnJlYXN0ZmVlZGluZ3Rlc3QiOgogICAgImEtYnJlYXN0ZmVlZGluZ3Rlc3QiCgovKiAKYS1yZXNwaXJhdG9yeXJhdGUgOiBhcHBsaWNhYmlsaXR5LVJlc3BpcmF0b3J5UmF0ZQogICAgKCJDb3VnaCIgPSB0cnVlIG9yICJEaWZmaWN1bHR5IEJyZWF0aGluZyIgPSB0cnVlIG9yICJBZ2VJbk1vbnRocyI8MikgYW5kIG8iRmFzdCBCcmVhdGhpbmciIGlzIG51bGwKKi8KZGVmaW5lICJhLXJlc3BpcmF0b3J5cmF0ZSI6CiAgICAoQmFzZS5HZXRPYnNWYWx1ZSgnRW1DYXJlLkIxMFMxLkRFMDUnKSA9IHRydWUgb3IgQmFzZS5HZXRPYnNWYWx1ZSgnRW1DYXJlLkIxMFMxLkRFMDEnKSA9IHRydWUgb3IgImFnZWlubW9udGhzIjwyKSBhbmQgQmFzZS5HZXRPYnNWYWx1ZSgnRW1DYXJlLkIyMi5ERTA3JykgaXMgbnVsbAoKLyogYWxpYXMgYXBwbGljYWJpbGl0eS1yZXNwaXJhdG9yeXJhdGUgOiBhLXJlc3BpcmF0b3J5cmF0ZSovCmRlZmluZSAiYXBwbGljYWJpbGl0eS1yZXNwaXJhdG9yeXJhdGUiOgogICAgImEtcmVzcGlyYXRvcnlyYXRlIgoKLyogCmEtYnJvbmNob2RpbGF0b3J0ZXN0IDogYXBwbGljYWJpbGl0eS1Ccm9uY2hvZGlsYXRvclRlc3QKICAgICgiQ291Z2giID0gdHJ1ZSBvciAiRGlmZmljdWx0eSBCcmVhdGhpbmciID0gdHJ1ZSkgYW5kICJXaGVlemluZyIgPSB0cnVlIGFuZCAobyJGYXN0IEJyZWF0aGluZyIgPSB0cnVlIG9yICJDaGVzdCBJbmRyYXdpbmciID0gdHJ1ZSkgYW5kICBjLiJkYW5nZXIgc2lnbnMiICE9IHRydWUgYW5kICJTdHJpZG9yIGluIGEgY2FsbSBjaGlsZCI9IGZhbHNlIGFuZCAiT3h5Z2VuIFNhdHVyYXRpb24iID49IDkwICclJwoqLwpkZWZpbmUgImEtYnJvbmNob2RpbGF0b3J0ZXN0IjoKICAgIChCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjEwUzEuREUwNScpID0gdHJ1ZSBvciBCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjEwUzEuREUwMScpID0gdHJ1ZSkgYW5kIEJhc2UuR2V0T2JzVmFsdWUoJ0VtQ2FyZS5CMTBTMi5ERTA1JykgPSB0cnVlIGFuZCAoQmFzZS5HZXRPYnNWYWx1ZSgnRW1DYXJlLkIyMi5ERTA3JykgPSB0cnVlIG9yIEJhc2UuR2V0T2JzVmFsdWUoJ0VtQ2FyZS5CMTBTMi5ERTAzJykgPSB0cnVlKSBhbmQgIENvYWxlc2NlKGMuImRhbmdlciBzaWducyIsZmFsc2UpIT10cnVlIGFuZCBCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjEwUzIuREUwNCcpPSBmYWxzZSBhbmQgQmFzZS5HZXRPYnNWYWx1ZSgnRW1DYXJlLkIxMFMyLkRFMDcnKSA+PSA5MCAnJScKCi8qIGFsaWFzIGFwcGxpY2FiaWxpdHktYnJvbmNob2RpbGF0b3J0ZXN0IDogYS1icm9uY2hvZGlsYXRvcnRlc3QqLwpkZWZpbmUgImFwcGxpY2FiaWxpdHktYnJvbmNob2RpbGF0b3J0ZXN0IjoKICAgICJhLWJyb25jaG9kaWxhdG9ydGVzdCIKCi8qIAphLWhlbW9nbG9iaW4gOiBhcHBsaWNhYmlsaXR5LUhlbW9nbG9iaW4KICAgICJQYWxtYXIgcGFsbG9yIiA9ICJTb21lIHBhbG1hciBwYWxsb3IiIG9yICJQYWxtYXIgUGFsbG9yIiA9ICJTZXZlcmUgUGFsbWFyIFBhbGxvciIgb3IgIk11Y291cyBtZW1icmFuZSBwYWxsb3IiID0gIlNvbWUgbXVjb3VzIG1lbWJyYW5lIHBhbGxvciIgb3IgIk11Y291cyBtZW1icmFuZSBwYWxsb3IiID0gIlNldmVyZSBtdWNvdXMgbWVtYnJhbmUgcGFsbG9yIgoqLwpkZWZpbmUgImEtaGVtb2dsb2JpbiI6CiAgICBCYXNlLkhhc09ic1ZhbHVlQ29kZSgnRW1DYXJlLkIxNVMyLkRFMDEnLCAnRW1DYXJlLkIxNVMyLkRFMDMnKSBvciBCYXNlLkhhc09ic1ZhbHVlQ29kZSgnRW1DYXJlLkIxNVMyLkRFMDEnLCAnRW1DYXJlLkIxNVMyLkRFMDInKSBvciBCYXNlLkhhc09ic1ZhbHVlQ29kZSgnRW1DYXJlLkIxNVMyLkRFMDknLCAnRW1DYXJlLkIxNVMyLkRFMTEnKSBvciBCYXNlLkhhc09ic1ZhbHVlQ29kZSgnRW1DYXJlLkIxNVMyLkRFMDknLCAnRW1DYXJlLkIxNVMyLkRFMTAnKQoKLyogYWxpYXMgYXBwbGljYWJpbGl0eS1oZW1vZ2xvYmluIDogYS1oZW1vZ2xvYmluKi8KZGVmaW5lICJhcHBsaWNhYmlsaXR5LWhlbW9nbG9iaW4iOgogICAgImEtaGVtb2dsb2JpbiIKCi8qIAphLXNlY29uZHRlbXBlcmF0dXJlIDogYXBwbGljYWJpbGl0eS1TZWNvbmRUZW1wZXJhdHVyZQogICAgYy4icHNiaSBvdGhlciB0aGFuIHRlbXBlcmF0dXJlIiAhPSB0cnVlIGFuZCBBZ2VJbk1vbnRocygpPDIgYW5kICJBeGlsbGFyeSBUZW1wZXJhdHVyZSIgPiAzOC41ICdDZWwnCiovCmRlZmluZSAiYS1zZWNvbmR0ZW1wZXJhdHVyZSI6CiAgICBDb2FsZXNjZShjLiJwc2JpIG90aGVyIHRoYW4gdGVtcGVyYXR1cmUiLGZhbHNlKSE9dHJ1ZSBhbmQgQWdlSW5Nb250aHMoKTwyIGFuZCBCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjYuREUwMScpID4gMzguNSAnQ2VsJwoKLyogYWxpYXMgYXBwbGljYWJpbGl0eS1zZWNvbmR0ZW1wZXJhdHVyZSA6IGEtc2Vjb25kdGVtcGVyYXR1cmUqLwpkZWZpbmUgImFwcGxpY2FiaWxpdHktc2Vjb25kdGVtcGVyYXR1cmUiOgogICAgImEtc2Vjb25kdGVtcGVyYXR1cmUiCgovKiAKYS1mbHVpZHRlc3QgOiBhcHBsaWNhYmlsaXR5LUZsdWlkVGVzdAogICAgKCJOb3QgYWJsZSB0byBkcmluayBvciBicmVhc3RmZWVkIiA9IHRydWUgb3IgIlZvbWl0aW5nIEV2ZXJ5dGhpbmciID0gdHJ1ZSBvciAiRGlhcnJob2VhIiA9IHRydWUpIGFuZCBvIk9yYWwgRmx1aWQgVGVzdCBSZXN1bHRzIiBpcyBudWxsCiovCmRlZmluZSAiYS1mbHVpZHRlc3QiOgogICAgKCJub3QgYWJsZSB0byBkcmluayBvciBicmVhc3RmZWVkIiA9IHRydWUgb3IgInZvbWl0aW5nIGV2ZXJ5dGhpbmciID0gdHJ1ZSBvciBCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjExUzEuREUwMScpID0gdHJ1ZSkgYW5kIEJhc2UuR2V0T2JzVmFsdWUoJ0VtQ2FyZS5CMjIuREUwOCcpIGlzIG51bGwKCi8qIGFsaWFzIGFwcGxpY2FiaWxpdHktZmx1aWR0ZXN0IDogYS1mbHVpZHRlc3QqLwpkZWZpbmUgImFwcGxpY2FiaWxpdHktZmx1aWR0ZXN0IjoKICAgICJhLWZsdWlkdGVzdCIKCi8qIApyZXNwaXJhdG9yeSByYXRlIHByb2ZpbGUgOiBuYW4KICAgIG8iUmVzcGlyYXRvcnkgUmF0ZSIKKi8KZGVmaW5lICJyZXNwaXJhdG9yeSByYXRlIHByb2ZpbGUiOgogICAgQmFzZS5HZXRPYnNWYWx1ZSgnRW1DYXJlLkIyMi5ERTAxJykKCi8qIApyZXNwaXJhdG9yeSByYXRlIHNlY29uZCBjb3VudCBwcm9maWxlIDogbmFuCiAgICBvIlJlc3BpcmF0b3J5IFJhdGUgU2Vjb25kIENvdW50IgoqLwpkZWZpbmUgInJlc3BpcmF0b3J5IHJhdGUgc2Vjb25kIGNvdW50IHByb2ZpbGUiOgogICAgQmFzZS5HZXRPYnNWYWx1ZSgnRW1DYXJlLkIyMi5ERTA0JykKCi8qIApmYXN0IGJyZWF0aGluZyBwcm9maWxlIDogbmFuCiAgICBvIkZhc3QgQnJlYXRoaW5nIgoqLwpkZWZpbmUgImZhc3QgYnJlYXRoaW5nIHByb2ZpbGUiOgogICAgQmFzZS5HZXRPYnNWYWx1ZSgnRW1DYXJlLkIyMi5ERTA3JykKCi8qIApvZnRycCA6IFVuYWJsZSB0byBQZXJmb3JtIE9yYWwgRmx1aWQgVGVzdCBQcm9maWxlCiAgICBvIlVuYWJsZSB0byBQZXJmb3JtIE9yYWwgRmx1aWQgVGVzdCIKKi8KZGVmaW5lICJvZnRycCI6CiAgICBCYXNlLkdldE9ic1ZhbHVlKCdFbUNhcmUuQjIyLkRFMTQnKQoKLyogYWxpYXMgdW5hYmxlIHRvIHBlcmZvcm0gb3JhbCBmbHVpZCB0ZXN0IHByb2ZpbGUgOiBvZnRycCovCmRlZmluZSAidW5hYmxlIHRvIHBlcmZvcm0gb3JhbCBmbHVpZCB0ZXN0IHByb2ZpbGUiOgogICAgIm9mdHJwIgoKLyogCmRzIDogRGFuZ2VyIFNpZ25zCiAgICBDb2FsZXNjZShjLiJkYW5nZXIgc2lnbnMiLGZhbHNlKQoqLwpkZWZpbmUgImRzIjoKICAgIENvYWxlc2NlKGMuImRhbmdlciBzaWducyIsZmFsc2UpCgovKiBhbGlhcyBkYW5nZXIgc2lnbnMgOiBkcyovCmRlZmluZSAiZGFuZ2VyIHNpZ25zIjoKICAgICJkcyIKCi8qIAplbWNhcmUuYjcuZGUwOSA6IE5vdCBhYmxlIHRvIGRyaW5rIG9yIGJyZWFzdGZlZWQKICAgIENvYWxlc2NlKG8iTm90IGFibGUgdG8gZHJpbmsgb3IgYnJlYXN0ZmVlZCIsZmFsc2UpCiovCmRlZmluZSAiZW1jYXJlLmI3LmRlMDkiOgogICAgQ29hbGVzY2UoQmFzZS5HZXRPYnNWYWx1ZSgnRW1DYXJlLkI3LkRFMDknKSxmYWxzZSkKCi8qIGFsaWFzIG5vdCBhYmxlIHRvIGRyaW5rIG9yIGJyZWFzdGZlZWQgOiBlbWNhcmUuYjcuZGUwOSovCmRlZmluZSAibm90IGFibGUgdG8gZHJpbmsgb3IgYnJlYXN0ZmVlZCI6CiAgICAiZW1jYXJlLmI3LmRlMDkiCgovKiAKZW1jYXJlLmI3LmRlMTAgOiBWb21pdGluZyBFdmVyeXRoaW5nCiAgICBDb2FsZXNjZShvIlZvbWl0aW5nIEV2ZXJ5dGhpbmciLGZhbHNlKQoqLwpkZWZpbmUgImVtY2FyZS5iNy5kZTEwIjoKICAgIENvYWxlc2NlKEJhc2UuR2V0T2JzVmFsdWUoJ0VtQ2FyZS5CNy5ERTEwJyksZmFsc2UpCgovKiBhbGlhcyB2b21pdGluZyBldmVyeXRoaW5nIDogZW1jYXJlLmI3LmRlMTAqLwpkZWZpbmUgInZvbWl0aW5nIGV2ZXJ5dGhpbmciOgogICAgImVtY2FyZS5iNy5kZTEwIgo="
        }
    ]
}