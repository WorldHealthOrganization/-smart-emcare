{
    "resourceType": "Library",
    "id": "emcareobservation",
    "url": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcareobservation",
    "version": "1.0.1.rc12.build.144",
    "name": "emcareobservation",
    "status": "active",
    "type": {
        "coding": [
            {
                "system": "http://hl7.org/fhir/ValueSet/library-type",
                "code": "logic-library"
            }
        ]
    },
    "relatedArtifact": [
        {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/who/anc-cds/Library/FHIRHelpers"
        }
    ],
    "content": [
        {
            "id": "ig-loader-emcareobservation.cql",
            "contentType": "text/cql",
            "data": ""
        }
    ]
}