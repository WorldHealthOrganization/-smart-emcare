{
    "resourceType": "Library",
    "id": "emcarebase",
    "url": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir//Library/emcarebase",
    "version": "1.0.3.build.169",
    "name": "emcarebase",
    "title": "EmCareBase",
    "status": "active",
    "type": {
        "coding": [
            {
                "system": "http://hl7.org/fhir/ValueSet/library-type",
                "code": "logic-library"
            }
        ]
    },
    "relatedArtifact": [
        {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/who/anc-cds/Library/FHIRHelpers"
        }
    ],
    "parameter": [
        {
            "name": "encounterid",
            "use": "in",
            "type": "string"
        }
    ],
    "dataRequirement": [
        {
            "type": "Patient",
            "profile": [
                "http://hl7.org/fhir/StructureDefinition/Patient"
            ]
        },
        {
            "type": "Encounter",
            "profile": [
                "http://hl7.org/fhir/StructureDefinition/Encounter"
            ]
        }
    ],
    "content": [
        {
            "id": "ig-loader-emcarebase.cql",
            "contentType": "text/cql",
            "data": "LypudGVyIgpAYXV0aG9yOiBQYXRyaWNrIERlbGNyb2l4CkBkZXNjcmlwdGlvbjogVGhpcyBsaWJyYXJ5IGlzIHBhcnQgb2YgdGhlIHByb2plY3QgRW1DYXJlIFByb2plY3QsIGl0cyBhbGxvd3Mgc3RhbmRhcmRpc2F0aW9uIGZvciB0aGUgb2JzZXJ2YXRpb24gcHJvY2Vzc2luZwoqLwoKbGlicmFyeSBlbWNhcmViYXNlIHZlcnNpb24gJzEuMC4zLmJ1aWxkLjE2OScKCnVzaW5nIEZISVIgdmVyc2lvbiAnNC4wLjEnCgppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzQuMC4xJwoKcGFyYW1ldGVyICJlbmNvdW50ZXJpZCIgU3RyaW5nCi8vcGFyYW1ldGVyICJFbmNvdW50ZXIiIEVuY291bnRlciQKY29kZXN5c3RlbSAiUm9sZUNvZGVTeXN0ZW0iIDogJ2h0dHBzOi8vZmhpci5kay5zd2lzc3RwaC1taXMuY2gvbWF0Y2hib3gvZmhpci9Db2RlU3lzdGVtL2VtY2FyZS1jdXN0b20tY29kZXMnCmNvZGUgIk1vdGhlciI6ICdNVEgnIGZyb20gIlJvbGVDb2RlU3lzdGVtIgoKY29udGV4dCBQYXRpZW50CgovL2RlZmluZSBlbmNvdW50ZXJpZDoKLy8gICJFbmNvdW50ZXIiLmlkCgoKCgpkZWZpbmUgIlllcyI6CiAgdHJ1ZQoKZGVmaW5lICJObyI6CiAgZmFsc2UgCgoKZGVmaW5lIGZ1bmN0aW9uIElzSW5FbmNvdW50ZXIocmVmIEZISVIuUmVmZXJlbmNlKToKICAgIGNhc2UKICAgIHdoZW4gZW5jb3VudGVyaWQgPSByZWYuaWQgdGhlbiB0cnVlCiAgICB3aGVuIHJlZi5pZGVudGlmaWVyIGlzIG5vdCBudWxsIGFuZCBlbmNvdW50ZXJpZCA9IHJlZi5pZGVudGlmaWVyLnZhbHVlIHRoZW4gdHJ1ZQogICAgd2hlbiBlbmNvdW50ZXJpZCA9IExhc3QoU3BsaXQocmVmLnJlZmVyZW5jZSwgJy8nKSkgdGhlbiB0cnVlCiAgICBlbHNlIGZhbHNlCmVuZAoKZGVmaW5lIGdldEVuY291bnRlcnM6CiAgICBbRW5jb3VudGVyXSBFIAogICAgICB3aGVyZSBFLmlkID0gImVuY291bnRlcmlkIgogICAgICAgIHJldHVybiBFCgpkZWZpbmUgZ2V0RW5jb3VudGVyOgogICAgc2luZ2xldG9uIGZyb20gZ2V0RW5jb3VudGVycwoKZGVmaW5lIGZ1bmN0aW9uIEVtQ2FyZUV4dGVuc2lvbnMoZWxlbWVudCBQYXRpZW50LCBpZCBTdHJpbmcpOgogIGVsZW1lbnQuZXh0ZW5zaW9uIEUKICAgICAgd2hlcmUgRS51cmwgPSAoJ2h0dHBzOi8vZmhpci5kay5zd2lzc3RwaC1taXMuY2gvbWF0Y2hib3gvZmhpci8vU3RydWN0dXJlRGVmaW5pdGlvbi8nICsgaWQpCiAgICAgIHJldHVybiBFCgpkZWZpbmUgZnVuY3Rpb24gRW1DYXJlRXh0ZW5zaW9uKGVsZW1lbnQgUGF0aWVudCwgaWQgU3RyaW5nKToKICBzaW5nbGV0b24gZnJvbSBFbUNhcmVFeHRlbnNpb25zKGVsZW1lbnQsIGlkKQoKZGVmaW5lIGdldFByaW1hcnlDYXJlR2l2ZXJSZWZlcmVuY2U6CiAgRW1DYXJlRXh0ZW5zaW9uKFBhdGllbnQsICdwcmltYXJ5Y2FyZWdpdmVyJykudmFsdWUKCmRlZmluZSBnZXRQcmltYXJ5Q2FyZUdpdmVyOgogIFtSZWxhdGVkUGVyc29uXSBSUCB3aGVyZSBSUC5pZCA9IExhc3QoU3BsaXQoZ2V0UHJpbWFyeUNhcmVHaXZlclJlZmVyZW5jZS5yZWZlcmVuY2UsICcvJykpCiAgICByZXR1cm4gUlAKCmRlZmluZSBpc01vdGhlclByaW1hcnlDYXJlR2l2ZXI6CiAgZ2V0UHJpbWFyeUNhcmVHaXZlciBpcyBub3QgbnVsbCBhbmQgRXhpc3RzKGdldFByaW1hcnlDYXJlR2l2ZXIucmVsYXRpb25zaGlwIHIgd2hlcmUgciB+ICJNb3RoZXIiKQoKZGVmaW5lICJCaW9sb2dpY2FsIE1vdGhlciBWaXRhbCBTdGF0dXMiOgogIEVtQ2FyZUV4dGVuc2lvbihQYXRpZW50LCAnbW90aGVyVml0YWxTdGF0dXMnKS52YWx1ZQogIApkZWZpbmUgIkJpb2xvZ2ljYWwgRmF0aGVyIFZpdGFsIFN0YXR1cyI6CiAgRW1DYXJlRXh0ZW5zaW9uKFBhdGllbnQsICdmYXRoZXJWaXRhbFN0YXR1cycpLnZhbHVlCi8vIHBlcnNvbiBhY2NvbXBhbnlpbmcgdGhlIGNoaWxkIGlzIGEgcGFydGljaXBhbnQgd2l0aCBhIG51bGwgdHlwZQpkZWZpbmUgZ2V0UmVsYXRlZFBlcnNvblJlZmVyZW5jZUFjY29tcGFueWluZ1RoZUNoaWxkOgogIENvYWxlc2NlKEZpcnN0KGdldEVuY291bnRlci5wYXJ0aWNpcGFudCBQIHdoZXJlIG5vdCBleGlzdHMoUC50eXBlKSApLmluZGl2aWR1YWwsIGdldFByaW1hcnlDYXJlR2l2ZXJSZWZlcmVuY2UpCgpkZWZpbmUgZ2V0UmVsYXRlZFBlcnNvbnNBY2NvbXBhbnlpbmdUaGVDaGlsZDoKICBbUmVsYXRlZFBlcnNvbl0gUlAgd2hlcmUgUlAuaWQgPSBMYXN0KFNwbGl0KGdldFJlbGF0ZWRQZXJzb25SZWZlcmVuY2VBY2NvbXBhbnlpbmdUaGVDaGlsZC5yZWZlcmVuY2UsICcvJykpCiAgICByZXR1cm4gUlAKCgpkZWZpbmUgZ2V0UmVsYXRlZFBlcnNvbkFjY29tcGFueWluZ1RoZUNoaWxkOgogIHNpbmdsZXRvbiBmcm9tIGdldFJlbGF0ZWRQZXJzb25zQWNjb21wYW55aW5nVGhlQ2hpbGQKCgpkZWZpbmUgIlBlcnNvbiBhY2NvbXBhbnlpbmcgY2hpbGQgdG9kYXkncyBSZWxhdGlvbnNoaXAgdG8gQ2xpZW50IjoKICBnZXRSZWxhdGVkUGVyc29uQWNjb21wYW55aW5nVGhlQ2hpbGQucmVsYXRpb25zaGlwCgoKCgpkZWZpbmUgZnVuY3Rpb24gZ2V0VmFsdWUoTyBPYnNlcnZhdGlvbik6CiAgY2FzZSAgCiAgICAgIHdoZW4gIE8gaXMgbnVsbCB0aGVuIG51bGwKICAgICAgd2hlbiBPLnZhbHVlIGlzIENvZGVhYmxlQ29uY2VwdCB0aGVuIENvYWxlc2NlKEZpcnN0KE8udmFsdWUuY29kaW5nIEMgd2hlcmUgQy5zeXN0ZW0gID0gJ2h0dHBzOi8vZmhpci5kay5zd2lzc3RwaC1taXMuY2gvbWF0Y2hib3gvZmhpci9Db2RlU3lzdGVtL2VtY2FyZS1jdXN0b20tY29kZXMnKSwgRmlyc3QoTy52YWx1ZS5jb2RpbmcpKQogICAgICBlbHNlIE8udmFsdWUKICBlbmQKCgpkZWZpbmUgZnVuY3Rpb24gYXNzZXNPYnNlcnZhdGlvbihPIE9ic2VydmF0aW9uKToKICBjYXNlICAKICAgICAgd2hlbiAgTyBpcyBudWxsIHRoZW4gbnVsbAogICAgICB3aGVuICBPLnN0YXR1cyBpbiAgeydjYW5jZWxsZWQnfSB0aGVuIGZhbHNlCiAgICAgIHdoZW4gTy52YWx1ZSBpcyBudWxsIHRoZW4gIHRydWUKICAgICAgZWxzZSBPLnZhbHVlCiAgZW5kCi8qICAgICAgCmRlZmluZSBmdW5jdGlvbiBHZXRPYnNlcnZhdGlvbkR1cmluZ0VuY291bnRlcihpZGxpc3QgTGlzdDxTeXN0ZW0uQ29kZT4pOgogIGlmIEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyRG9uZShpZGxpc3QgKSBpcyBudWxsIHRoZW4gCiAgICAgIEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyRG9uZShpZGxpc3QgKQogIGVsc2UKICAgIEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyTm90Rm91bmQoaWRsaXN0ICkKKi8KCmRlZmluZSBmdW5jdGlvbiBHZXRPYnNlcnZhdGlvbkR1cmluZ0VuY291bnRlcihpZCBTeXN0ZW0uQ29kZSk6CiAgQ29hbGVzY2UoR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXJEb25lKGlkICksIEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyTm90Rm91bmQoaWQgKSkKLyoKZGVmaW5lIGZ1bmN0aW9uIEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyRG9uZShpZGxpc3QgTGlzdDxTeXN0ZW0uQ29kZT4pOgogICAgICBMYXN0KFtPYnNlcnZhdGlvbjogaWRsaXN0IF0gTwogICAgICAgIHdoZXJlICAgSXNJbkVuY291bnRlcihPLmVuY291bnRlcikgCiAgICAgICAgYW5kIE8uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnLCAnY29ycmVjdGVkJ30pCiovCmRlZmluZSBmdW5jdGlvbiBHZXRPYnNlcnZhdGlvbkR1cmluZ0VuY291bnRlckRvbmUoaWQgU3lzdGVtLkNvZGUpOgogICAgICBGaXJzdChbT2JzZXJ2YXRpb246IGlkIF0gTwogICAgICAgIHdoZXJlICAgSXNJbkVuY291bnRlcihPLmVuY291bnRlcikgCiAgICAgICAgYW5kIE8uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnLCAnY29ycmVjdGVkJ30gCiAgICAgICAgc29ydCBieSBpc3N1ZWQudmFsdWUgZGVzYykgCgoKZGVmaW5lIGZ1bmN0aW9uIEhhc09ic2VydmF0aW9uQ29kZUR1cmluZ0VuY291bnRlckRvbmUoaWQgU3lzdGVtLkNvZGUsIHZhbHVlQ29kZSBTeXN0ZW0uQ29kZSk6CiAgICAKICAgIEV4aXN0cyhbT2JzZXJ2YXRpb246IGlkIF0gTwogICAgICAgIHdoZXJlICAgSXNJbkVuY291bnRlcihPLmVuY291bnRlcikgCiAgICAgICAgYW5kIE8uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnLCAnY29ycmVjdGVkJ30KICAgICAgICBhbmQgTy52YWx1ZSBpcyBGSElSLkNvZGVhYmxlQ29uY2VwdAogICAgICAgIGFuZCBPLnZhbHVlIH4gdmFsdWVDb2RlKQoKLy9FeGlzdHMoW09ic2VydmF0aW9uXSBPIHdoZXJlIE8uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnLCAnY29ycmVjdGVkJ30gYW5kIE8udmFsdWUgaXMgRkhJUi5Db2RlYWJsZUNvbmNlcHQgICBhbmQgRXhpc3RzKCBPLnZhbHVlLmNvZGluZyBDIHdoZXJlIEMgaXMgRkhJUi5Db2RpbmcgYW5kIEMuY29kZSA9IEZISVIuY29kZSB7dmFsdWU6ICdFbUNhcmUuQjIwUzIuREUwNCd9KSApIgoKLyoKZGVmaW5lIGZ1bmN0aW9uIEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyTm90Rm91bmQoaWRsaXN0IExpc3Q8U3lzdGVtLkNvZGU+KToKICAgICAgTGFzdChbT2JzZXJ2YXRpb246IGlkbGlzdF0gTwogICAgICAgd2hlcmUgIElzSW5FbmNvdW50ZXIoTy5lbmNvdW50ZXIpIAogICAgICAgICAgYW5kIE8uc3RhdHVzIGluIHsnY2FuY2VsbGVkJ30pCiAgICAgICAgICAqLwpkZWZpbmUgZnVuY3Rpb24gR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXJOb3RGb3VuZChpZCBTeXN0ZW0uQ29kZSk6CiAgICAgIEZpcnN0KFtPYnNlcnZhdGlvbjogaWRdIE8KICAgICAgIHdoZXJlICBJc0luRW5jb3VudGVyKE8uZW5jb3VudGVyKSAKICAgICAgICAgIGFuZCBPLnN0YXR1cyBpbiB7J2NhbmNlbGxlZCd9CiAgICAgICAgICBzb3J0IGJ5IGlzc3VlZC52YWx1ZSBkZXNjKQovKgoKZGVmaW5lIGZ1bmN0aW9uIEdldE51bWJlck9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyKGlkbGlzdCBMaXN0PFN5c3RlbS5Db2RlPik6CiAgQ291bnQoCiAgICBbT2JzZXJ2YXRpb246IGlkbGlzdF0gTwogICAgICAgIHdoZXJlICBJc0luRW5jb3VudGVyKCBPLmVuY291bnRlcikgCiAgICAgICAgYW5kIE8uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnLCAnY29ycmVjdGVkJ30pCiovCmRlZmluZSBmdW5jdGlvbiBHZXROdW1iZXJPYnNlcnZhdGlvbkR1cmluZ0VuY291bnRlcihpZCBTeXN0ZW0uQ29kZSk6CiAgQ291bnQoCiAgICBbT2JzZXJ2YXRpb246IGlkXSBPCiAgICAgICAgd2hlcmUgIElzSW5FbmNvdW50ZXIoIE8uZW5jb3VudGVyKSAKICAgICAgICBhbmQgTy5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcsICdjb3JyZWN0ZWQnfSkKCi8vICoqKioqKioqKioqKioqKioqKioqKioqKiAgIEdldE9ic1ZhbHVlICoqKioqKioqKioqKioqKioqKioqKioqKi8KLyoKZGVmaW5lIGZ1bmN0aW9uIEdldE9ic1ZhbHVlKGlkbGlzdCBMaXN0PFN5c3RlbS5Db2RlPik6CiAgICBnZXRWYWx1ZShHZXRPYnNlcnZhdGlvbkR1cmluZ0VuY291bnRlcihpZGxpc3QpKQoKZGVmaW5lIGZ1bmN0aW9uIEdldE9ic1ZhbHVlKGlkIFN5c3RlbS5Db2RlKToKICAgIGdldFZhbHVlKEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyKHtpZH0pKQoqLwoKZGVmaW5lIGZ1bmN0aW9uIEdldE9ic1ZhbHVlKGlkIFN5c3RlbS5Db2RlKToKICAgIGdldFZhbHVlKEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyKGlkKSkKCmRlZmluZSBmdW5jdGlvbiBHZXRPYnNWYWx1ZShpZCBTeXN0ZW0uU3RyaW5nLCBjb2Rlc3lzdGVtIFN5c3RlbS5TdHJpbmcpOgogICAgZ2V0VmFsdWUoR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXIoY29kaW5nKGlkLCBjb2Rlc3lzdGVtKSkpCgpkZWZpbmUgZnVuY3Rpb24gR2V0T2JzVmFsdWUoaWQgU3lzdGVtLlN0cmluZyk6CiAgICBnZXRWYWx1ZShHZXRPYnNlcnZhdGlvbkR1cmluZ0VuY291bnRlcihjb2RpbmcoaWQsICdodHRwczovL2ZoaXIuZGsuc3dpc3N0cGgtbWlzLmNoL21hdGNoYm94L2ZoaXIvQ29kZVN5c3RlbS9lbWNhcmUtY3VzdG9tLWNvZGVzJykpKQoKZGVmaW5lIGZ1bmN0aW9uIEhhc09ic1ZhbHVlQ29kZShpZCBTeXN0ZW0uU3RyaW5nLCB2YWx1ZSBTeXN0ZW0uQ29kZSk6CiAgIEhhc09ic2VydmF0aW9uQ29kZUR1cmluZ0VuY291bnRlckRvbmUoY29kaW5nKGlkLCAnaHR0cHM6Ly9maGlyLmRrLnN3aXNzdHBoLW1pcy5jaC9tYXRjaGJveC9maGlyL0NvZGVTeXN0ZW0vZW1jYXJlLWN1c3RvbS1jb2RlcycpICwgdmFsdWUgKQogIApkZWZpbmUgZnVuY3Rpb24gSGFzT2JzVmFsdWVDb2RlKGlkIFN5c3RlbS5TdHJpbmcsIHZhbHVlIFN5c3RlbS5TdHJpbmcpOgogICBIYXNPYnNlcnZhdGlvbkNvZGVEdXJpbmdFbmNvdW50ZXJEb25lKGNvZGluZyhpZCwgJ2h0dHBzOi8vZmhpci5kay5zd2lzc3RwaC1taXMuY2gvbWF0Y2hib3gvZmhpci9Db2RlU3lzdGVtL2VtY2FyZS1jdXN0b20tY29kZXMnKSAsIGNvZGluZyh2YWx1ZSwgJ2h0dHBzOi8vZmhpci5kay5zd2lzc3RwaC1taXMuY2gvbWF0Y2hib3gvZmhpci9Db2RlU3lzdGVtL2VtY2FyZS1jdXN0b20tY29kZXMnKSApCgpkZWZpbmUgZnVuY3Rpb24gSGFzT2JzVmFsdWVDb2RlKGlkIFN5c3RlbS5Db2RlLCB2YWx1ZSBTeXN0ZW0uU3RyaW5nKToKICAgSGFzT2JzZXJ2YXRpb25Db2RlRHVyaW5nRW5jb3VudGVyRG9uZShpZCAsIGNvZGluZyh2YWx1ZSwgJ2h0dHBzOi8vZmhpci5kay5zd2lzc3RwaC1taXMuY2gvbWF0Y2hib3gvZmhpci9Db2RlU3lzdGVtL2VtY2FyZS1jdXN0b20tY29kZXMnKSApCgovLyAqKioqKioqKioqKioqKioqKioqKioqKiogICBIYXNPYnMgKioqKioqKioqKioqKioqKioqKioqKioqLwovKgpkZWZpbmUgZnVuY3Rpb24gSGFzT2JzKGlkbGlzdCBMaXN0PFN5c3RlbS5Db2RlPik6CiAgICBhc3Nlc09ic2VydmF0aW9uKEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyKGlkbGlzdCkpCgpkZWZpbmUgZnVuY3Rpb24gSGFzT2JzKGlkIFN5c3RlbS5Db2RlKToKICAgIGFzc2VzT2JzZXJ2YXRpb24oR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXIoe2lkfSkpCiovCmRlZmluZSBmdW5jdGlvbiBIYXNPYnMoaWQgU3lzdGVtLkNvZGUpOgogICAgYXNzZXNPYnNlcnZhdGlvbihHZXRPYnNlcnZhdGlvbkR1cmluZ0VuY291bnRlcihpZCkpCgpkZWZpbmUgZnVuY3Rpb24gSGFzT2JzKGlkIFN5c3RlbS5TdHJpbmcsIGNvZGVzeXN0ZW0gU3lzdGVtLlN0cmluZyk6CiAgICBhc3Nlc09ic2VydmF0aW9uKEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyKGNvZGluZyhpZCwgY29kZXN5c3RlbSkpKQoKZGVmaW5lIGZ1bmN0aW9uIEhhc09icyhpZCBTeXN0ZW0uU3RyaW5nKToKICAgIGFzc2VzT2JzZXJ2YXRpb24oR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXIoY29kaW5nKGlkKSkpCgpkZWZpbmUgZnVuY3Rpb24gSGFzT2JzKGlkIEZISVIuY29kZSwgY29kZXN5c3RlbSBTeXN0ZW0uU3RyaW5nKToKICAgIGFzc2VzT2JzZXJ2YXRpb24oR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXIoY29kaW5nKGlkLCBjb2Rlc3lzdGVtKSkpCi8qCmRlZmluZSBmdW5jdGlvbiBHZXRIaXN0b3JpY09ic2VydmF0aW9uKGlkbGlzdCBMaXN0PFN5c3RlbS5Db2RlPiwgbmJkYXlzIEludGVnZXIpOgogIGlmIEdldEhpc3RvcmljT2JzZXJ2YXRpb25Ob3Rmb3VuZChpZGxpc3QgLCBjb2Rlc3lzdGVtICwgbmJkYXlzICkgaXMgbnVsbCB0aGVuIAogICAgICBHZXRIaXN0b3JpY09ic2VydmF0aW9uTm90Zm91bmQoaWRsaXN0ICwgY29kZXN5c3RlbSAsIG5iZGF5cyApCiAgZWxzZQogICAgR2V0SGlzdG9yaWNPYnNlcnZhdGlvbk5vdGZvdW5kKGlkbGlzdCAsIGNvZGVzeXN0ZW0gLCBuYmRheXMgKQoqLwoKZGVmaW5lIGZ1bmN0aW9uIEdldEhpc3RvcmljT2JzZXJ2YXRpb24oaWQgU3lzdGVtLkNvZGUsIG5iZGF5cyBJbnRlZ2VyKToKICBDb2FsZXNjZShHZXRIaXN0b3JpY09ic2VydmF0aW9uRG9uZShpZCAsICBuYmRheXMgKSwgIEdldEhpc3RvcmljT2JzZXJ2YXRpb25Ob3Rmb3VuZChpZCAgLCBuYmRheXMgKSkKLyoKZGVmaW5lIGZ1bmN0aW9uIEdldEhpc3RvcmljT2JzZXJ2YXRpb25Eb25lKGlkbGlzdCBMaXN0PFN5c3RlbS5Db2RlPiwgbmJkYXlzIEludGVnZXIpOgogICAgICBMYXN0KFtPYnNlcnZhdGlvbjogaWRsaXN0IF0gTwogICAgICAgIHdoZXJlICBPLnN0YXR1cyBpbiB7ICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCd9CiAgICAgICAgYW5kIChkaWZmZXJlbmNlIGluIGRheXMgYmV0d2VlbiBPLmlzc3VlZCBhbmQgVG9kYXkoKSkgPCBuYmRheXMpCiovCmRlZmluZSBmdW5jdGlvbiBHZXRIaXN0b3JpY09ic2VydmF0aW9uRG9uZShpZCBTeXN0ZW0uQ29kZSwgbmJkYXlzIEludGVnZXIpOgogICAgICBGaXJzdChbT2JzZXJ2YXRpb246IGlkIF0gTwogICAgICAgIHdoZXJlICBPLnN0YXR1cyBpbiB7ICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCd9CiAgICAgICAgYW5kIChkaWZmZXJlbmNlIGluIGRheXMgYmV0d2VlbiBPLmlzc3VlZCBhbmQgVG9kYXkoKSkgPCBuYmRheXMgCiAgICAgICAgc29ydCBieSBpc3N1ZWQudmFsdWUgZGVzYyApCgovKgpkZWZpbmUgZnVuY3Rpb24gR2V0SGlzdG9yaWNPYnNlcnZhdGlvbk5vdGZvdW5kKGlkbGlzdCBMaXN0PFN5c3RlbS5Db2RlPiwgbmJkYXlzIEludGVnZXIpOgogICAgICBMYXN0KFtPYnNlcnZhdGlvbjogaWRsaXN0XSBPCiAgICAgICAgd2hlcmUgIE8uc3RhdHVzIGluIHsnY2FuY2VsbGVkJ30KKi8KZGVmaW5lIGZ1bmN0aW9uIEdldEhpc3RvcmljT2JzZXJ2YXRpb25Ob3Rmb3VuZChpZCBTeXN0ZW0uQ29kZSwgbmJkYXlzIEludGVnZXIpOgogICAgICBGaXJzdChbT2JzZXJ2YXRpb246IGlkXSBPCiAgICAgICAgd2hlcmUgIE8uc3RhdHVzIGluIHsnY2FuY2VsbGVkJ30KICAgICAgICAgIGFuZCAoZGlmZmVyZW5jZSBpbiBkYXlzIGJldHdlZW4gTy5pc3N1ZWQgYW5kIFRvZGF5KCkpIDwgbmJkYXlzIAogICAgICAgIHNvcnQgYnkgaXNzdWVkLnZhbHVlIGRlc2MpCi8vICoqKioqKioqKioqKioqKioqKioqKioqKiAgIEhhc09ic0hpc3RvcnkgKioqKioqKioqKioqKioqKioqKioqKioqLwoKLyoKZGVmaW5lIGZ1bmN0aW9uIEhhc09ic0hpc3RvcnkoaWRsaXN0IExpc3Q8U3lzdGVtLkNvZGU+LCAgbmJkYXlzIEludGVnZXIpOgogIGFzc2VzT2JzZXJ2YXRpb24oR2V0SGlzdG9yaWNPYnNlcnZhdGlvbihpZGxpc3QsIG5iZGF5cykpCgoKIGRlZmluZSBmdW5jdGlvbiBIYXNPYnNIaXN0b3J5KGlkIFN5c3RlbS5Db2RlLCBjbmJkYXlzIEludGVnZXIpOgogIGFzc2VzT2JzZXJ2YXRpb24oR2V0SGlzdG9yaWNPYnNlcnZhdGlvbih7aWR9LCBuYmRheXMpKQoqLwpkZWZpbmUgZnVuY3Rpb24gSGFzT2JzSGlzdG9yeShpZCBTeXN0ZW0uQ29kZSwgbmJkYXlzIEludGVnZXIpOgogIGFzc2VzT2JzZXJ2YXRpb24oR2V0SGlzdG9yaWNPYnNlcnZhdGlvbihpZCwgbmJkYXlzKSkKCmRlZmluZSBmdW5jdGlvbiBIYXNPYnNIaXN0b3J5KGlkIFN5c3RlbS5TdHJpbmcsIGNvZGVzeXN0ZW0gU3lzdGVtLlN0cmluZywgbmJkYXlzIEludGVnZXIpOgogIGFzc2VzT2JzZXJ2YXRpb24oR2V0SGlzdG9yaWNPYnNlcnZhdGlvbihjb2RpbmcoaWQsIGNvZGVzeXN0ZW0pLCBuYmRheXMpKQoKCmRlZmluZSBmdW5jdGlvbiBIYXNPYnNIaXN0b3J5KGlkIFN5c3RlbS5TdHJpbmcsIG5iZGF5cyBJbnRlZ2VyKToKICBhc3Nlc09ic2VydmF0aW9uKEdldEhpc3RvcmljT2JzZXJ2YXRpb24oY29kaW5nKGlkKSwgbmJkYXlzKSkKCmRlZmluZSBmdW5jdGlvbiBjKHMgU3lzdGVtLlN0cmluZyk6CiAgRkhJUi5jb2RlIHsgdmFsdWU6IHMgfQoKCgpkZWZpbmUgZnVuY3Rpb24gY29kaW5nKHMgU3lzdGVtLlN0cmluZywgdXJsIFN5c3RlbS5TdHJpbmcpOgogIFN5c3RlbS5Db2RlIHsKICAgICAgICAgICAgICAgIGNvZGU6ICBzICwKICAgICAgICAgICAgICAgIHN5c3RlbTogIHVybCAKICAgICAgICAgICAgfQoKZGVmaW5lIGZ1bmN0aW9uIGNvZGluZyhzIEZISVIuY29kZSwgdXJsIFN5c3RlbS5TdHJpbmcpOgogIFN5c3RlbS5Db2RlIHsKICAgICAgICAgICAgICAgIGNvZGU6ICBzLnZhbHVlICwKICAgICAgICAgICAgICAgIHN5c3RlbTogIHVybCAKICAgICAgICAgICAgfQoKZGVmaW5lIGZ1bmN0aW9uIGNvZGluZyhzIFN5c3RlbS5TdHJpbmcpOgogIFN5c3RlbS5Db2RlIHsKICAgICAgICAgICAgICAgIGNvZGU6ICBzICwKICAgICAgICAgICAgICAgIHN5c3RlbTogICdodHRwczovL2ZoaXIuZGsuc3dpc3N0cGgtbWlzLmNoL21hdGNoYm94L2ZoaXIvQ29kZVN5c3RlbS9lbWNhcmUtY3VzdG9tLWNvZGVzJwogICAgICAgICAgICB9CgoKZGVmaW5lIGZ1bmN0aW9uIFRvVXJsKHMgU3lzdGVtLlN0cmluZyk6CiAgdXJsIHt2YWx1ZTpzfQoKCgovLyAqKioqKioqKioqKioqKioqKioqKioqKiogICBHZXRDb25kICoqKioqKioqKioqKioqKioqKioqKioqKi8KLyoKZGVmaW5lIGZ1bmN0aW9uIEdldENvTy5lbmNvdW50ZXJuZGl0aW9uKGlkbGlzdCBMaXN0PFN5c3RlbS5Db2RlPik6CiAgICAgIExhc3QoW0NvbmRpdGlvbjogaWRsaXN0XSBPCiAgICAgICAgd2hlcmUgIElzSW5FbmNvdW50ZXIoIE8uZW5jb3VudGVyKSAKICAgICAgICBhbmQgZXhpc3RzKE8udmVyaWZpY2F0aW9uU3RhdHVzLmNvZGluZyBDIHdoZXJlIEMuY29kZSBpbiB7J3VuY29uZmlybWVkJywgJ3Byb3Zpc2lvbmFsJywgJ2RpZmZlcmVudGlhbCcsICdjb25maXJtZWQnfSAKICAgICAgICBhbmQgQy5zeXN0ZW0gPSAnaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb25kaXRpb24tdmVyLXN0YXR1cycpKQoqLwpkZWZpbmUgZnVuY3Rpb24gR2V0Q29uZGl0aW9uKGlkIFN5c3RlbS5Db2RlKToKICAgICAgRmlyc3QoW0NvbmRpdGlvbjogaWRdIE8KICAgICAgICB3aGVyZSAgSXNJbkVuY291bnRlcihPLmVuY291bnRlcikgCiAgICAgICAgYW5kIGV4aXN0cyhPLnZlcmlmaWNhdGlvblN0YXR1cy5jb2RpbmcgQyB3aGVyZSBDLmNvZGUgaW4geyd1bmNvbmZpcm1lZCcsICdwcm92aXNpb25hbCcsICdkaWZmZXJlbnRpYWwnLCAnY29uZmlybWVkJ30gCiAgICAgICAgYW5kIEMuc3lzdGVtID0gJ2h0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29uZGl0aW9uLXZlci1zdGF0dXMnKSAKICAgICAgICBzb3J0IGJ5IHJlY29yZGVkRGF0ZSBkZXNjKQoKCmRlZmluZSBmdW5jdGlvbiBhc3Nlc0NvbmRpdGlvbihPIENvbmRpdGlvbik6CiAgaWYgTyBpcyBudWxsIHRoZW4gCiAgICBmYWxzZQogIGVsc2UKICAgIHRydWUKLyoKZGVmaW5lIGZ1bmN0aW9uIEdldENvbmQoaWRsaXN0IExpc3Q8U3lzdGVtLkNvZGU+KToKICBHZXRDb25kaXRpb24oaWRsaXN0KQoKZGVmaW5lIGZ1bmN0aW9uIEdldENvbmQoaWQgU3lzdGVtLkNvZGUpOgogIEdldENvbmRpdGlvbih7aWR9KQoqLwpkZWZpbmUgZnVuY3Rpb24gR2V0Q29uZChpZCBTeXN0ZW0uQ29kZSk6CiAgKEdldENvbmRpdGlvbihpZCkpCgpkZWZpbmUgZnVuY3Rpb24gR2V0Q29uZChpZCBTeXN0ZW0uU3RyaW5nLCBjb2Rlc3lzdGVtIFN5c3RlbS5TdHJpbmcpOgogIChHZXRDb25kaXRpb24oY29kaW5nKGlkLCBjb2Rlc3lzdGVtKSkpCgpkZWZpbmUgZnVuY3Rpb24gR2V0Q29uZChpZCBTeXN0ZW0uU3RyaW5nKToKICAoR2V0Q29uZGl0aW9uKGNvZGluZyhpZCkpKQoKLy8gKioqKioqKioqKioqKioqKioqKioqKioqICAgSGFzQ29uZCAqKioqKioqKioqKioqKioqKioqKioqKiovCi8qCmRlZmluZSBmdW5jdGlvbiBIYXNDb25kKGlkbGlzdCBMaXN0PFN5c3RlbS5Db2RlPik6CiAgYXNzZXNDb25kaXRpb24oR2V0Q29uZGl0aW9uKGlkbGlzdCkpCgoKMzUxOEdldENvbmRpdGlvbihpZCkpCiovCmRlZmluZSBmdW5jdGlvbiBIYXNDb25kKGlkIFN5c3RlbS5TdHJpbmcsIGNvZGVzeXN0ZW0gU3lzdGVtLlN0cmluZyk6CiAgYXNzZXNDb25kaXRpb24oR2V0Q29uZGl0aW9uKGNvZGluZyhpZCwgY29kZXN5c3RlbSkpKQoKZGVmaW5lIGZ1bmN0aW9uIEhhc0NvbmQoaWQgU3lzdGVtLlN0cmluZyk6CiAgYXNzZXNDb25kaXRpb24oR2V0Q29uZGl0aW9uKGNvZGluZyhpZCkpKQoKZGVmaW5lIGZ1bmN0aW9uIEhhc0NvbmQoaWQgU3lzdGVtLkNvZGUpOgogIGFzc2VzQ29uZGl0aW9uKEdldENvbmRpdGlvbihpZCkpCgovLyAqKioqKioqKioqKioqKioqKioqKioqKiogICBQYXRpZW50SGFzSGlzdG9yeU9mQ29uZGl0aW9uICoqKioqKioqKioqKioqKioqKioqKioqKi8KLyoKZGVmaW5lIGZ1bmN0aW9uIEdldEhpc3RvcmljQ29uZGl0aW9uKGlkbGlzdCBMaXN0PFN5c3RlbS5Db2RlPiwgIG5iZGF5cyBJbnRlZ2VyKToKICAgICAgTGFzdChbQ29uZGl0aW9uOiBpZGxpc3RdIE8KICAgICAgICB3aGVyZSAgKGRpZmZlcmVuY2UgaW4gZGF5cyBiZXR3ZWVuIE8ucmVjb3JkZWREYXRlIGFuZCBUb2RheSgpKSA8IG5iZGF5cwogICAgICAgIGFuZCBleGlzdHMoTy52ZXJpZmljYXRpb25TdGF0dXMuY29kaW5nIEMgd2hlcmUgQy5jb2RlIGluIHsndW5jb25maXJtZWQnLCAncHJvdmlzaW9uYWwnLCAnZGlmZmVyZW50aWFsJywgJ2NvbmZpcm1lZCd9IAogICAgICAgIGFuZCBDLnN5c3RlbSA9ICdodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi12ZXItc3RhdHVzJykpCiovCgpkZWZpbmUgZnVuY3Rpb24gR2V0SGlzdG9yaWNDb25kaXRpb24oaWQgU3lzdGVtLkNvZGUsICBuYmRheXMgSW50ZWdlcik6CiAgICAgIEZpcnN0KFtDb25kaXRpb246IGlkXSBPCiAgICAgICAgd2hlcmUgIChkaWZmZXJlbmNlIGluIGRheXMgYmV0d2VlbiBPLnJlY29yZGVkRGF0ZSBhbmQgVG9kYXkoKSkgPCBuYmRheXMKICAgICAgICBhbmQgZXhpc3RzKE8udmVyaWZpY2F0aW9uU3RhdHVzLmNvZGluZyBDIHdoZXJlIEMuY29kZSBpbiB7J3VuY29uZmlybWVkJywgJ3Byb3Zpc2lvbmFsJywgJ2RpZmZlcmVudGlhbCcsICdjb25maXJtZWQnfSAKICAgICAgICBhbmQgQy5zeXN0ZW0gPSAnaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb25kaXRpb24tdmVyLXN0YXR1cycpIAogICAgICAgIHNvcnQgYnkgcmVjb3JkZWREYXRlIGRlc2MpCgoKCgovKgpkZWZpbmUgZnVuY3Rpb24gSGFzQ29uZEhpc3RvcnkoaWRsaXN0IExpc3Q8U3lzdGVtLkNvZGU+LCAgbmJkYXlzIEludGVnZXIpOgogIGFzc2VzQ29uZGl0aW9uKEdldEhpc3RvcmljQ29uZGl0aW9uKGlkbGlzdCwgIG5iZGF5cykpCgoKZGVmaW5lIGZ1bmN0aW9uIEhhc0NvbmRIaXN0b3J5KGlkIFN5c3RlbS5Db2RlLCAgbmJkYXlzIEludGVnZXIpOgogIGFzc2VzQ29uZGl0aW9uKEdldEhpc3RvcmljQ29uZGl0aW9uKHtpZH0sIG5iZGF5cykpCiovCmRlZmluZSBmdW5jdGlvbiBIYXNDb25kSGlzdG9yeShpZCBTeXN0ZW0uQ29kZSwgbmJkYXlzIEludGVnZXIpOgogIGFzc2VzQ29uZGl0aW9uKEdldEhpc3RvcmljQ29uZGl0aW9uKGlkLCAgbmJkYXlzKSkKCmRlZmluZSBmdW5jdGlvbiBIYXNDb25kSGlzdG9yeShpZCBTeXN0ZW0uU3RyaW5nLCBjb2Rlc3lzdGVtIFN5c3RlbS5TdHJpbmcsIG5iZGF5cyBJbnRlZ2VyKToKICBhc3Nlc0NvbmRpdGlvbihHZXRIaXN0b3JpY0NvbmRpdGlvbihjb2RpbmcoaWQsY29kZXN5c3RlbSksbmJkYXlzKSkKCgpkZWZpbmUgZnVuY3Rpb24gSGFzQ29uZEhpc3RvcnkoaWQgU3lzdGVtLlN0cmluZywgbmJkYXlzIEludGVnZXIpOgogIGFzc2VzQ29uZGl0aW9uKEdldEhpc3RvcmljQ29uZGl0aW9uKGNvZGluZyhpZCksICBuYmRheXMpKQoKCgovL2RlZmluZSBmdW5jdGlvbiBQYXRpZW50SGFzQ29uZGl0aW9uRHVyaW5nRW5jb3VudGVyKGlkIFN0cmluZywgY29kZXN5c3RlbSB1cmwsIGR1cmF0aW9uIEludGVnZXIpKToKCi8vZGVmaW5lIGZ1bmN0aW9uIFBhdGllbnRIYXNDb25kaXRpb25Gcm9tVmFsdWVTZXREdXJpbmdFbmNvdW50ZXIoaWQgU3RyaW5nLCBjb2Rlc3lzdGVtIHVybCwgZHVyYXRpb24gSW50ZWdlcikpOgoKLy9kZWZpbmUgZnVuY3Rpb24gUGF0aWVudEhhc0hzaXN0b3J5Q29uZGl0aW9uKGlkIFN0cmluZyxjb2Rlc3lzdGVtIHVybCAsIGR1cmF0aW9uIEludGVnZXIpOgovL2RlZmluZSBmdW5jdGlvbiBQYXRpZW50SGFzSHNpc3RvcnlDb25kaXRpb25Gcm9tVmFsdWVTZXQoaWQgU3RyaW5nLGNvZGVzeXN0ZW0gdXJsICwgZHVyYXRpb24gSW50ZWdlcik6CgoKLy8gUGF0aWVudEhhc1N5bXB0b20oInN5bXB0b20gbmFtZSIpOiBzeW1wdG9tIGluIHRoZSBlbmNvdW50ZXIKCgovLyBQYXRpZW50TGFzdE1lYXN1cmVPZigibWVhc3VyZSBuYW1lIik6IG1lYXN1cmUgaW4gdGhlIGVuY291bnRlcgoKLy8gUGF0aWVudExhc3RIaXN0b3JpY01lYXN1cmVPZigibWVhc3VyZSBuYW1lIiwgZHVyYXRpb24pOiBtZWFzdXJlIGluIHRoZSBwYXRpZW50IGhpc3RvcnkgZHVyaW5nIGR1cmF0aW9uCgovLyBQYXRpZW50SGFzRGlhZ25vc3RpYygiRGlhZ25vc3RpYyBuYW1lIiApOiBEaWFnbm9zdGljIGluIHRoZSBlbmNvdW50ZXIKCi8vIFBhdGllbnRIYXNIaXN0b3J5T2ZEaWFnbm9zdGljKCJEaWFnbm9zdGljIG5hbWUiLCBkdXJhdGlvbiApOiBEaWFnbm9zdGljIGluIHRoZSBwYXRpZW50IGhpc3RvcnkgZHVyaW5nIGR1cmF0aW9uCgovLyBQYXRpZW50SGFzUHJvcG9zZWRvckNvbmZpcm1lZERpYW5vc3RpYygiRGlhZ25vc3RpYyBuYW1lIiApOiBEaWFnbm9zdGljIGluIHRoZSBlbmNvdW50ZXIKCi8vIFBhdGllbnRIYXNIaXN0b3J5T2ZQcm9wb3NlZG9yQ29uZmlybWVkRGlhbm9zdGljKCJEaWFnbm9zdGljIG5hbWUiLCBkdXJhdGlvbiApOiBEaWFnbm9zdGljIGluIHRoZSBwYXRpZW50IGhpc3RvcnkgZHVyaW5nIGR1cmF0aW9uCgovLyBQYXRpZW50WlNjb3JlV2ZBKHdpZWdodCwgYWdlKQoKLy8gUGF0aWVudFdlaWdodEZyb21XZkEoYWdlLCBNdWFjKQo="
        }
    ]
}