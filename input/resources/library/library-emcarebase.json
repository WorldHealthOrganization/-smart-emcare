{
    "resourceType": "Library",
    "id": "EmCareBase",
    "url": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/EmCareBase",
    "version": "0.99.99",
    "name": "EmCareBase",
    "title": "EmCareBase",
    "status": "active",
    "type": {
        "coding": [
            {
                "system": "http://hl7.org/fhir/ValueSet/library-type",
                "code": "logic-library"
            }
        ]
    },
    "relatedArtifact": [
        {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/who/anc-cds/Library/FHIRHelpers"
        }
    ],
    "parameter": [
        {
            "name": "encounterid",
            "use": "in",
            "type": "string"
        }
    ],
    "dataRequirement": [
        {
            "type": "Patient",
            "profile": [
                "http://hl7.org/fhir/StructureDefinition/Patient"
            ]
        },
        {
            "type": "Encounter",
            "profile": [
                "http://hl7.org/fhir/StructureDefinition/Encounter"
            ]
        }
    ],
    "content": [
        {
            "id": "ig-loader-EmCareBase.cql",
            "contentType": "text/cql",
            "data": ""
        }
    ]
}